<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="io_XOutputStream" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************






Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.io.XOutputStream
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim Bytes(10) As Integer
    Dim rBytes(10) As Integer

    Test.StartMethod("writeBytes()")
    bOK = true

    for i = 0 to ubound(Bytes())
        Bytes(i) = i
    next i
    oObj.writeBytes(Bytes())

    oInputStream = getInStream()
    iBytesRead = oInputStream.readBytes(rBytes(), ubound(Bytes()) + 1)
    Out.Log("" &amp; iBytesRead &amp; " bytes were read")
    bOK = bOK AND iBytesRead = ubound(Bytes()) + 1

    for i = 0 to ubound(rBytes())
        Out.Log("Expected " &amp; Bytes(i) &amp; ", actual is " &amp; int(rBytes(i)))
        bOK = bOK AND Bytes(i) = rBytes(i)
    next i

    Test.MethodTested("writeBytes()", bOK)

    Test.StartMethod("flush()")
    bOK = true
    oObj.flush()
    Test.MethodTested("flush()", bOK)

    Test.StartMethod("closeOutput()")
    bOK = true
    Out.Log("This method is called in main module.")
    Test.MethodTested("closeOutput()", bOK)

    ResetStreams()

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
