<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="text_XPagePrintable" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.text.XPagePrintable
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim aPrintSettings As Variant
    Dim aNewSettings As Variant

    Test.StartMethod("getPagePrintSettings()")
    bOK = true
    aPrintSettings = oObj.getPagePrintSettings()
    Out.Log("PrintSettings have " &amp; (ubound(aPrintSettings) + 1) &amp; " elements")
    bOK = bOK AND (ubound(aPrintSettings) &gt; 0)
    Test.MethodTested("getPagePrintSettings()", bOK)

    Test.StartMethod("setPagePrintSettings()")
    bOK = true
    Dim bOldLandscape As Boolean
    ' Changing Landscape property...
    bOldLandscape = aPrintSettings(8).Value
    aPrintSettings(8).Value = NOT bOldLandscape

    oObj.setPagePrintSettings(aPrintSettings())
    aNewSettings = oObj.getPagePrintSettings()
    bOK = bOK AND (aNewSettings(8).Value = NOT bOldLandscape)

    Test.MethodTested("setPagePrintSettings()", bOK)

    Test.StartMethod("printPages()")
    bOK = true
    Dim aPrintingOptions(0) As New com.sun.star.beans.PropertyValue
    Dim sFileName As String
    sFileName = utils.Path2URL(cTestDocsDir &amp; "/temp/XPagePrintable.prt")

    if (FileExists(sFileName)) then
        kill(sFileName)
    end if

    aPrintingOptions(0).Name = "FileName"
    aPrintingOptions(0).Value = sFileName
    aPrintingOptions(0).State = com.sun.star.beans.PropertyState.DEFAULT_VALUE

    Out.Log("Printing to " &amp; sFileName)
    oObj.printPages(aPrintingOptions())

    bOK = bOK AND FileExists(sFileName)
    Test.MethodTested("printPages()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
