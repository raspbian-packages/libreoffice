<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XDatabaseRange" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XDatabaseRange
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oldDA, oSD, oFD, oID, oSTD As Object
    Dim newDA As New com.sun.star.table.CellRangeAddress

    Test.StartMethod("getDataArea()")
    Test.StartMethod("setDataArea()")
    bOK = true
    oldDA = oObj.getDataArea()
    newDA.Sheet = 0
    newDA.StartColumn = 5
    newDA.StartRow = 6
    newDA.EndColumn = 10
    newDA.EndRow = 8
    oObj.setDataArea(newDA)
    bOK = bOK AND oObj.getDataArea().Sheet = newDA.Sheet
    bOK = bOK AND oObj.getDataArea().StartColumn = newDA.StartColumn
    bOK = bOK AND oObj.getDataArea().StartRow = newDA.StartRow
    bOK = bOK AND oObj.getDataArea().EndColumn = newDA.EndColumn
    bOK = bOK AND oObj.getDataArea().EndRow = newDA.EndRow
    oObj.setDataArea(oldDA)
    Test.MethodTested("getDataArea()", bOK)
    Test.MethodTested("setDataArea()", bOK)

    Test.StartMethod("getSortDescriptor()")
    bOK = true
    oSD = oObj.getSortDescriptor()
    bOK = bOK AND isArray(oSD)
    Test.MethodTested("getSortDescriptor()", bOK)

    Test.StartMethod("getFilterDescriptor()")
    bOK = true
    oFD = oObj.getFilterDescriptor()
    bOK = bOK AND hasUnoInterfaces(oFD, "com.sun.star.sheet.XSheetFilterDescriptor")
    Test.MethodTested("getFilterDescriptor()", bOK)

    Test.StartMethod("getSubTotalDescriptor()")
    bOK = true
    oSTD = oObj.getSubTotalDescriptor()
    bOK = bOK AND hasUnoInterfaces(oSTD, "com.sun.star.sheet.XSubTotalDescriptor")
    Test.MethodTested("getSubTotalDescriptor()", bOK)

    Test.StartMethod("getImportDescriptor()")
    bOK = true
    oID = oObj.getImportDescriptor()
    bOK = bOK AND isArray(oID)
    Test.MethodTested("getImportDescriptor()", bOK)

    Test.StartMethod("refresh()")
    bOK = true
    oObj.refresh()
    Test.MethodTested("refresh()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
