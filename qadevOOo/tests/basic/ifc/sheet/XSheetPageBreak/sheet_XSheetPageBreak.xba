<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XSheetPageBreak" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XSheetPageBreak
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim nColsBreaks As Integer
    Dim nRowsBreaks As Integer
    Dim oColumn As Object
    Dim oRow As Object
    Dim oPBs As Variant
    Dim iRowsBefore As Integer
    Dim iColsBefore As Integer

    iColsBefore = ubound(oObj.getColumnPageBreaks()) - 1
    iRowsBefore = ubound(oObj.getRowPageBreaks()) - 1

    Out.Log("Before test: colBreaks: " &amp; iColsBefore &amp; _
                        " rowBreaks: " &amp; iRowsBefore)

    Out.Log("Inserting new PageBreaks.")
    oColumn = oObj.Columns.getByIndex(5)
    oColumn.SetPropertyValue("IsStartOfNewPage", true)
    oRow = oObj.Rows.getByIndex(15)
    oRow.SetPropertyValue("IsStartOfNewPage", true)

    Test.StartMethod("getColumnPageBreaks()")
    bOK = true
    oPBs = oObj.getColumnPageBreaks()
    nColsBreaks = uBound(oPBs)
    Out.Log("There are " &amp; nColsBreaks &amp; " column breaks.")
    bOK = bOK AND nColsBreaks &gt; 0
    bOK = bOK AND oPBs(0).Position &gt;= 0
    Test.MethodTested("getColumnPageBreaks()", bOK)

    Test.StartMethod("getRowPageBreaks()")
    bOK = true
    oPBs = oObj.getRowPageBreaks()
    nRowsBreaks = uBound(oPBs)
    Out.Log("There are " &amp; nRowsBreaks &amp; " row breaks.")
    bOK = bOK AND nRowsBreaks &gt; 0
    bOK = bOK AND oPBs(0).Position &gt;= 0
    Test.MethodTested("getRowPageBreaks()", bOK)

    Test.StartMethod("removeAllManualPageBreaks()")
    bOK = true
    oObj.removeAllManualPageBreaks()
    Out.Log("After test: colBreaks: " &amp; ubound(oObj.getColumnPageBreaks()) - 1 &amp; _
                       " rowBreaks: " &amp; ubound(oObj.getRowPageBreaks()) - 1)

    bOK = bOK AND ubound(oObj.getRowPageBreaks()) - 1 = iRowsBefore
    bOK = bOK AND ubound(oObj.getColumnPageBreaks()) - 1= iColsBefore
    Test.MethodTested("removeAllManualPageBreaks()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
