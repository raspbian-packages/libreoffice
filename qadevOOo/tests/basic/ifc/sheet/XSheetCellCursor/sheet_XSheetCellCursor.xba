<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XSheetCellCursor" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XSheetCellCursor
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim nCols As Integer, nRows As Long
    Dim ResetCols As Integer, ResetRows As Long
    Dim oRange As Variant

    ResetCols = oObj.getColumns().getCount()
    ResetRows = oObj.getRows().getCount()

    Test.StartMethod("collapseToCurrentRegion()")
    bOK = true
    oObj.collapseToCurrentRegion()
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols &gt; 0) AND (nRows &gt; 0)
    Out.Log("collapseToCurrentRegion(): nCols = " &amp; nCols &amp; "(&gt;0) nRows = " &amp; nRows &amp; "(&gt;0)")
    Test.MethodTested("collapseToCurrentRegion()", bOK)

    'collapseToMergedArea goes into the area. But you must be insite
    ' of one cell of these area
    Test.StartMethod("collapseToMergedArea()")
    bOK = true
    oObj.collapseToSize(5,6)
    oRange = oObj.getCellRangeByPosition(0,0,2,2)
    oRange.merge(true)
    oObj.gotoStart()
    oObj.collapseToMergedArea()
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols = 3) AND (nRows = 3)
    Out.Log("collapseToMergedArea(): nCols = " &amp; nCols &amp; "(3) nRows = " &amp; nRows &amp; "(3)")
    Test.MethodTested("collapseToMergedArea()", bOK)
    oRange.merge(false)


    Test.StartMethod("collapseToSize()")
    bOK = true
    oObj.collapseToSize(5,6)
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols = 5 ) AND (nRows = 6)
    Out.Log("collapseToSize(): nCols = " &amp; nCols &amp; "(5) nRows = " &amp; nRows &amp; "(6)")
    Test.MethodTested("collapseToSize()", bOK)

    Test.StartMethod("collapseToCurrentArray()")
    oObj.collapseToSize(5,6)
    oRange = oObj.getCellRangeByPosition(0,0,2,3)
    oRange.setArrayFormula("A1:A3")
    bOK = true
    oObj.collapseToCurrentArray()
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols = 3) AND (nRows = 4)
    Out.Log("collapseToCurrentArray(): nCols = " &amp; nCols &amp; "(3) nRows = " &amp; nRows &amp; "(4)")
    Test.MethodTested("collapseToCurrentArray()", bOK)
    oRange.setArrayFormula("")


    Test.StartMethod("expandToEntireColumns()")
    bOK = true
    oObj.collapseToSize(1,1)
    oObj.expandToEntireColumns()
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols = 1) AND (nRows &gt;= 32000)
    Out.Log("expandToEntireColumns(): nCols = " &amp; nCols &amp; "(1) nRows = " &amp; nRows &amp; "(&gt;=32000)")
    Test.MethodTested("expandToEntireColumns()", bOK)

    Test.StartMethod("expandToEntireRows()")
    bOK = true
    oObj.collapseToSize(1,1)
    oObj.expandToEntireRows()
    nCols = oObj.getColumns().getCount()
    nRows = oObj.getRows().getCount()
    bOK = bOK AND (nCols &gt;= 256) AND (nRows = 1)
    Out.Log("expandToEntireRows(): nCols = " &amp; nCols &amp; "(&gt;=256) nRows = " &amp; nRows &amp; "(1)")
    Test.MethodTested("expandToEntireRows()", bOK)


    Out.Log("Reset to old range: " &amp; ResetCols &amp; "," &amp; ResetRows)
    oObj.collapseToSize(ResetCols, ResetRows)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
