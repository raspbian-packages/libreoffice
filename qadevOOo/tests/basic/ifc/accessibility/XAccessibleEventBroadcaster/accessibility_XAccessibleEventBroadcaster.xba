<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="accessibility_XAccessibleEventBroadcaster" script:language="StarBasic">
&apos;*************************************************************************
&apos;*
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
&apos;*************************************************************************
&apos;*************************************************************************



&apos; Be sure that all variables are dimensioned:
option explicit

&apos;*************************************************************************
&apos; This Interface/Service test depends on the following GLOBAL variables,
&apos; which must be specified in the object creation:

&apos; fireEvent() precedure 
&apos; located in component test

&apos;*************************************************************************





Dim oListener1 As Object
Dim oListener2 As Object
Dim bL1called As Boolean
Dim bL2called As Boolean


Sub RunTest()

&apos;*************************************************************************
&apos; INTERFACE: 
&apos; com.sun.star.accessibility.XAccessibleEventBroadcaster
&apos;*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim isTransient As Boolean
    Dim stateSet As Variant
    bOK = true

    &apos;out.log(&quot;Creating Listeners...&quot;)
    oListener1 = createUNOListener(&quot;EL1_&quot;,&quot;com.sun.star.accessibility.XAccessibleEventListener&quot;)
    oListener2 = createUNOListener(&quot;EL2_&quot;,&quot;com.sun.star.accessibility.XAccessibleEventListener&quot;)
    bOK = bOK AND NOT isNULL(oListener1) AND NOT isNULL(oListener2)
    if NOT bOK then out.log( &quot;ERROR: Cannot create listeners...&quot;)

    if NOT hasUNOInterfaces(oObj,&quot;com.sun.star.accessibility.XAccessibleContext&quot;) then
        &apos;out.log(&quot;Object does not implement XAccessibleContext.&quot;)
        isTransient = false
    else
        stateSet = oObj.getAccessibleStateSet()
        isTransient = stateSet.contains(27)
    End If

    Test.StartMethod(&quot;addEventListener()&quot;)
    bOK = true
    bL1called = false
    bL2called = false
    &apos;out.log(&quot;Adding two listeners...&quot;)
    oObj.com_sun_star_accessibility_XAccessibleEventBroadcaster_addEventListener(oListener1)
    oObj.com_sun_star_accessibility_XAccessibleEventBroadcaster_addEventListener(oListener2)
    &apos;out.log(&quot;fire event&quot;)
    fireEvent()
    wait(500)
    out.log(&quot;Listener1 called: &quot;+bL1called)
    out.log(&quot;Listener2 called: &quot;+bL2called)
    if NOT isTransient then
        bOK = bOK AND bL1called AND bL2called
    else
        &apos;out.log(&quot;Object is transient, listeners aren&apos;t expected to call.&quot;)
        bOK = true
    End If
    Test.MethodTested(&quot;addEventListener()&quot;,bOK)


    Test.StartMethod(&quot;removeEventListener()&quot;)
    bOK = true
    bL1called = false
    bL2called = false
    &apos;out.log(&quot;Removing one listener...&quot;)
    oObj.com_sun_star_accessibility_XAccessibleEventBroadcaster_removeEventListener(oListener1)
    &apos;out.log(&quot;fire event&quot;)
    fireEvent()
    wait(500)
    out.log(&quot;Listener1 called: &quot;+bL1called)
    out.log(&quot;Listener2 called: &quot;+bL2called)
    if NOT isTransient then
        bOK = bOK AND NOT bL1called AND bL2called
    else
        &apos;out.log(&quot;Object is transient, listeners aren&apos;t expected to call.&quot;)
        bOK = true
    End If
    Test.MethodTested(&quot;removeEventListener()&quot;,bOK)

    &apos; Removing the second listener...
    oObj.com_sun_star_accessibility_XAccessibleEventBroadcaster_removeEventListener(oListener2)


Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub

Sub EL1_notifyEvent(ev As Variant)
    &apos;out.log(&quot;CallBack for Listener1 notifyEvent was called.&quot;)
    bL1called = true
End Sub 

Sub EL1_disposing()
End Sub

Sub EL2_notifyEvent(ev As Variant)
    &apos;out.log(&quot;CallBack for Listener2 notifyEvent was called.&quot;)
    bL2called = true
End Sub

Sub EL2_disposing()
End Sub

</script:module>