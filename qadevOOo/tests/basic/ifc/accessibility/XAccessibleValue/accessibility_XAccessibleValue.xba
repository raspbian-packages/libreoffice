<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="accessibility_XAccessibleValue" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************



' Be sure that all variables are dimensioned:
option explicit




Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.accessibility.XAccessibleValue
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean

    Test.StartMethod("getMinimumValue()")
    Dim minVal As Variant
    bOK = true
    minVal = oObj.getMinimumValue()
    Out.Log("Minimum value is "+minVal)
    Test.MethodTested("getMinimumValue()",bOK)

    Test.StartMethod("getMaximumValue()")
    Dim maxVal As Variant
    bOK = true
    maxVal = oObj.getMaximumValue()
    Out.Log("Maximum value is "+maxVal)
    Test.MethodTested("getMaximumValue()",bOK)

    Test.StartMethod("getCurrentValue()")
    Dim curVal As Variant
    bOK = true
    curVal = oObj.getCurrentValue()
    bOK = bOK AND (curVal &gt;= minVal) AND (curVal &lt;= maxVal)
    Test.MethodTested("getCurrentValue()",bOK)


    Test.StartMethod("setCurrentValue()")
    Dim newVal As Variant, resVal As Variant
    bOK = true
    newVal = curVal + 1
    if (newVal &gt; maxVal) then newVal = newVal - 2

    Out.Log("Setting new value: "+newVal)
    bOK = bOK AND oObj.setCurrentValue(newVal)
    resVal = oObj.getCurrentValue()
    Out.Log("Result: "+resVal)
    bOK = bOK AND (Abs(newVal - resVal) &lt; 0.00001)

    Out.Log("Setting new value: "+minVal)
    bOK = bOK AND oObj.setCurrentValue(minVal)
    resVal = oObj.getCurrentValue()
    Out.Log("Result: "+resVal)
    bOK = bOK AND (Abs(minVal - resVal) &lt; 0.00001)

    Out.Log("Setting new value: "+maxVal)
    bOK = bOK AND oObj.setCurrentValue(maxVal)
    resVal = oObj.getCurrentValue()
    Out.Log("Result: "+resVal)
    bOK = bOK AND (Abs(maxVal - resVal) &lt; 0.00001)

    newVal = minVal - 1
    Out.Log("Setting new value: "+newVal)
    bOK = bOK AND oObj.setCurrentValue(newVal)
    resVal = oObj.getCurrentValue()
    Out.Log("Result: "+resVal)
    bOK = bOK AND (Abs(minVal - resVal) &lt; 0.00001)

    newVal = maxVal + 1
    Out.Log("Setting new value: "+newVal)
    bOK = bOK AND oObj.setCurrentValue(newVal)
    resVal = oObj.getCurrentValue()
    Out.Log("Result: "+resVal)
    bOK = bOK AND (Abs(maxVal - resVal) &lt; 0.00001)

    Test.MethodTested("setCurrentValue()",bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
