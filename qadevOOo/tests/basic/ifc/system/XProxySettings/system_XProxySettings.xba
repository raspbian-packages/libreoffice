<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="system_XProxySettings" script:language="StarBasic">


'*************************************************************************
'
' DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
' 
' Copyright 2000, 2010 Oracle and/or its affiliates.
'
' OpenOffice.org - a multi-platform office productivity suite
'
' This file is part of OpenOffice.org.
'
' OpenOffice.org is free software: you can redistribute it and/or modify
' it under the terms of the GNU Lesser General Public License version 3
' only, as published by the Free Software Foundation.
'
' OpenOffice.org is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License version 3 for more details
' (a copy is included in the LICENSE file that accompanied this code).
'
' You should have received a copy of the GNU Lesser General Public License
' version 3 along with OpenOffice.org.  If not, see
' <http://www.openoffice.org/license.html>
' for a copy of the LGPLv3 License.
'
'*************************************************************************
'*************************************************************************





Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.system.XProxySettings
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean


    Test.StartMethod("getFtpProxyAddress()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getFtpProxyAddress()) = 8)
    Test.MethodTested("getFtpProxyAddress()", bOK)

    Test.StartMethod("getFtpProxyPort()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getFtpProxyAddress()) = 8)
    Test.MethodTested("getFtpProxyPort()", bOK)

    Test.StartMethod("getGopherProxyAddress()")
    bOK = true
    bOK = bOK AND  (VarType(oObj.getGopherProxyAddress()) = 8)
    Test.MethodTested("getGopherProxyAddress()", bOK)

    Test.StartMethod("getGopherProxyPort()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getGopherProxyPort()) = 8)
    Test.MethodTested("getGopherProxyPort()", bOK)

    Test.StartMethod("getHttpProxyAddress()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getHttpProxyAddress()) = 8)
    Test.MethodTested("getHttpProxyAddress()", bOK)

    Test.StartMethod("getHttpProxyPort()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getHttpProxyPort()) = 8)
    Test.MethodTested("getHttpProxyPort()", bOK)

    Test.StartMethod("getHttpsProxyAddress()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getHttpsProxyAddress()) = 8)
    Test.MethodTested("getHttpsProxyAddress()", bOK)

    Test.StartMethod("getHttpsProxyPort()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getHttpsProxyPort()) = 8)
    Test.MethodTested("getHttpsProxyPort()", bOK)

    Test.StartMethod("getSocksProxyAddress()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getSocksProxyAddress()) = 8)
    Test.MethodTested("getSocksProxyAddress()", bOK)

    Test.StartMethod("getSocksProxyPort()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getSocksProxyPort()) = 8)
    Test.MethodTested("getSocksProxyPort()", bOK)

    Test.StartMethod("getProxyBypassAddress()")
    bOK = true
    bOK = bOK AND (VarType(oObj.getProxyBypassAddress()) = 8)
    Test.MethodTested("getProxyBypassAddress()", bOK)

    Test.StartMethod("isProxyEnabled()")
    bOK = true
    bOK = bOK AND (VarType(oObj.isProxyEnabled()) = 11)
    Test.MethodTested("isProxyEnabled()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
